setwd()
setwd( )
setwd(C:\Users\PERDSONAL\Documents\GitHub\2021II_GBI6_ExamenFinal)
setwd("C:\Users\PERDSONAL\Documents\GitHub\2021II_GBI6_ExamenFinal")
setwd("C:/Users/PERDSONAL/Documents/GitHub/2021II_GBI6_ExamenFinal")
df <- "deff función"
library(readr)
df <- read_csv("data/mRNA_expr.csv")
View(df)
library(readr)
df <- "deff función"
library(readr)
df <- read_csv("data/mRNA_expr.csv")
setwd("C:/Users/PERDSONAL/Documents/GitHub2021II_GBI6_ExamenFinal")
setwd("C:/Users/PERDSONAL/Documents/GitHub/2021II_GBI6_ExamenFinal")
setwd("C:/Users/PERDSONAL/Documents/GitHub/2021II_GBI6_ExamenFinal")
df <- "cargue la data"
library(readr)
df <- read_csv("Data/mRNA_expr.csv")
View(df)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
df <- "cargue la data"
library(readr)
df <- read_csv("Data/mRNA_expr.csv")
View(df)
df <- "cargue la data"
library(readr)
df <- read_csv("Data/mRNA_expr.csv")
library(tidyr)
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
# Escriba aquí la función long_df
library(tidyr)
library(dplyr)
long_df <- function(df) {
df$dataset <- as.factor(df$dataset)
df_longer <- gather(df, gen, expresion_level, GATA3, PTEN, XBP1, ESR1, MUC1, FN1, GAPDH, factor_key=TRUE)
df_longer1 <- select(df_longer, -bcr_patient_barcode)
return (df_longer1)
}
View(long_df)
# Genere la data df_long
df_long <- long_df(df)
View(df)
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
findFn("starts_with")
install.packages("dplyr")
install.packages("dplyr")
# Escriba el código para crear el Descriptive table
library(sjPlot)
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
# Escriba el código para crear el Descriptive table
library(sos)
install.packages("sos")
# Escriba el código para crear el Descriptive table
library(sos)
findFn("select")
library(sjPlot)
library(sjmisc)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
# Escriba el código para crear el Descriptive table
library(sos)
findFn("select")
# Escriba el código para crear el Descriptive table
library(sos)
library(sjPlot)
library(sjmisc)
library(dplyr)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
desc_table <- filtro %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(desc_table) %>% tab_df(title = "Descripte table de cancer de riñon y su nivel de expresión", file = "results/mRNA_expr_summary.doc")
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
library(dplyr)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
desc_table <- filtro %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(desc_table) %>% tab_df(title = "Descripte table de cancer de riñon y su nivel de expresión", file = "results/mRNA_expr_summary.doc")
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
library(dplyr)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
desc_table <- filtro %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(desc_table) %>% tab_df(title = "Descripte table de cancer de riñon y su nivel de expresión", file = "results/mRNA_expr_summary.doc")
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
library(dplyr)
filtro <- df_long %>% filter(dataset == "KIPAN") %>% select(2:3)
desc_table <- filtro %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(desc_table) %>% tab_df(title = "Descripte table de cancer de riñon y su nivel de expresión", file = "results/mRNA_expr_summary.csv")
# Escriba el código para crear la función tcga_boxplots
library(ggplot2)
tcga_boxplots <- function(dataset) {
return(ggplot (dataset, aes(x = gen, y = expresion_level, col = gen)) + labs(x="Gen", y = "Nivel de expresion") + geom_boxplot() + geom_jitter(size=0.2))
}
# Escriba el código para generar la lista.
datos <- list(
BRCA <- filter(df_long, dataset == "BRCA"),
OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC")
)
list_boxplots = lapply(datos, function(x) {ggplot(x, aes(dataset, expresion_level, col = dataset)) +
geom_boxplot() + labs(x = "", y = "Nivel de expresión")})
View(KIPAN)
View(list_boxplots)
View(KIPAN)
# Escriba el código para generar la lista.
datos <- list(
BRCA <- filter(df_long, dataset == "BRCA"),
OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC")
)
list_boxplots = lapply(datos, function(x) {ggplot(x, aes(dataset, expresion_level, col = dataset)) +
geom_boxplot() + labs(x = "", y = "Nivel de expresión")})
# Escriba el código para generar la lista.
datos <- list(
BRCA <- filter(df_long, dataset == "BRCA"),
OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC")
)
list_boxplots = lapply(datos, function(x) {ggplot(x, aes(dataset, expresion_level, col = dataset)) +
geom_boxplot() + labs(x = "", y = "Nivel de expresión")})
# Escriba el código para guardar la tercera figura de la lista.
datos <- list(BRCA <- filter(df_long, dataset == "BRCA"), OV <- filter(df_long, dataset == "OV"), LUSC <- filter(df_long, dataset == "LUSC"), KIPAN <- filter(df_long, dataset == "KIPAN"), KIRP <- filter(df_long, dataset == "KIRP"), UCEC <- filter(df_long, dataset == "UCEC")
)
head(datos)
